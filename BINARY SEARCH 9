DESSCRIPTION :  (GFG)

Square Root
Given a positive integer n, find the square root of n. If n is not a perfect square, then return the floor value.
Floor value of any number is the greatest Integer which is less than or equal to that number

Examples:

Input: n = 4
Output: 2
Explanation: Since, 4 is a perfect square, so its square root is 2.

Input: n = 11
Output: 3
Explanation: Since, 11 is not a perfect square, floor of square root of 11 is 3.

Input: n = 1
Output: 1

Constraints:
1 ≤ n ≤  3 x 104

APPROACH   :   TAKE LOW=1 AND HIGH=n/2;
              IF SQAURE OF MID<=N THE STORE THE MID AND GO IN RIGHT
              ELSE GO IN THE LEFT

JAVA CODE:

class Solution {
    int floorSqrt(int n) {
        // Your code here
        int low=1, high=n/2;
        int ans=1;
        while(low<=high){
            int mid=(low+high)/2;
            if(mid*mid <= n){
                ans=mid;
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return ans;
    }
}
