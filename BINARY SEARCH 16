Aggressive Cows (GFG)

You are given an array with unique elements of stalls[], which denote the position of a stall. 
You are also given an integer k which denotes the number of aggressive cows. 
Your task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples :

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, which also is the largest among all possible ways.

Input: stalls[] = [10, 1, 2, 7, 5], k = 3
Output: 4
Explanation: The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4, which also is the largest among all possible ways.

Input: stalls[] = [2, 12, 11, 3, 26, 7], k = 5
Output: 1
Explanation: Each cow can be placed in any of the stalls, as the no. of stalls are exactly equal to the number of cows.
The minimum distance between cows, in this case, is 1, which also is the largest among all possible ways.

Constraints:
2 <= stalls.size() <= 106
0 <= stalls[i] <= 108
1 <= k <= stalls.size()

APPROACH : WE HAVE TO FIND THE LARGEST DIFFERENCE SUCH THAT ALL COW CAN BE PLACED. ARRAY REPRESENT THE LOCATION OF STALL, SO WE THERE IS NO ROLE OF INDEX BUT IS THE LOCATION.
          SO SORT THE ARRAYS. MIN DIFFERENCE COULD BE 1 AND THE MAXIMUM DIFFERENCE CAN BE ACHIEVED BY PLACING COW AT FIRST AND LAST LOCATION.
          BY TAKING MID, FIND WHETHER K COWS CAN BE PLACED MAINTAINING THE "MID" DISTANCE

JAVA CODE :

class Solution {
    public static int aggressiveCows(int[] stalls, int k) {
        Arrays.sort(stalls);
        int n=stalls.length;
        int low=1, high=stalls[n-1]-stalls[0];
        int min=0;
        while(low<=high){
            int mid=(low+high)/2;
            int temp=k;
            if(canPlace(stalls, mid, temp)){
                min=mid;
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return min;
    }
    private static boolean canPlace(int nums[], int minDist, int k){
        k--;
        int prev=0;
        for(int i=1; i<nums.length; i++){
            if(nums[i]-nums[prev] >= minDist){
                k--;
                if(k==0){
                    return true;
                }
                prev=i;
            }
            
        }
        return false;
    }
}
