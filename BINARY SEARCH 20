Minimize Max Distance to Gas Station
We have a horizontal number line. On that number line, we have gas stations at positions stations[0], stations[1], ..., stations[n-1], where n is the size of the stations array. Now, we add k more gas stations so that d, the maximum distance between adjacent gas stations, is minimized. We have to find the smallest possible value of d. Find the answer exactly to 2 decimal places.
Note: stations is in a strictly increasing order.

Example 1:

Input:
n = 10
stations[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 9
Output: 0.50
Explanation: Each of the 9 stations can be added mid way between all the existing adjacent stations.

Example 2:
Input:
n = 10
stations[] = [3, 6, 12, 19, 33, 44, 67, 72, 89, 95] 
k = 2 
Output: 14.00 
Explanation: Construction of gas stations at 8th(between 72 and 89) and 6th(between 44 and 67) locations.

JAVA CODE :


class Pair{
    double diff;
    int index;
    Pair(double d, int i){
        this.diff=d;
        this.index=i;
    }
}
class Solution {
    
    public static double findSmallestMaxDist(int stations[], int k) {
        // code here
        int nums[]=new int[stations.length-1];
        //Arrays.fill(nums,0);
        
        PriorityQueue<Pair> pq= new PriorityQueue<>((a,b)->Double.compare(b.diff, a.diff));
        for(int i=0; i<stations.length-1; i++){
            double d=(double)(stations[i+1]-stations[i]);
            pq.add(new Pair(d,i));
        }
        
        for(int i=0; i<k; i++){
            Pair p = pq.poll();
            int idx=p.index;
            nums[idx]++;
            double d = (double)(stations[idx+1]-stations[idx])/(double)(nums[idx]+1);
            pq.add(new Pair(d,idx));
        }
        return pq.poll().diff;
    }
}
