Painter's Partition Problem

Given an array/list of length ‘n’, where the array/list represents the boards and each element of the given array/list represents the length of each board. 
Some ‘k’ numbers of painters are available to paint these boards. Consider that each unit of a board takes 1 unit of time to paint.
You are supposed to return the area of the minimum time to get this job done of painting all the ‘n’ boards under a constraint that 
any painter will only paint the continuous sections of boards.

Example :
Input: arr = [2, 1, 5, 6, 2, 3], k = 2
Output: 11
Explanation:
First painter can paint boards 1 to 3 in 8 units of time and the second painter can paint boards 4-6 in 11 units of time. Thus both painters will paint all the boards in max(8,11) = 11 units of time. It can be shown that all the boards can't be painted in less than 11 units of time.
Detailed explanation ( Input/output format, Notes, Images )

Sample Input 1 :
4 2
10 20 30 40
Sample Output 1 : 60
Explanation For Sample Input 1 :
In this test case, we can divide the first 3 boards for one painter and the last board for the second painter.

Sample Input 2 :
2 2
48 90
Sample Output 2 : 90

Expected Time Complexity:
Try to do this in O(n*log(n)).

Constraints :
1 <= n <= 10^5
1 <= k <= n
1 <= arr[i] <= 10^9

Time Limit: 1 sec.

APPROACH : WHAT WILL BE THE MINIMUM AND MAXIMUM AREA A PAINTER CAN PAINT.
            MIN=MAX_ELEMENT, MAX=SUM OF ALL ELEMENT
            USE SAME ABOVE APPROACH.

JAVA CODE :

import java.util.ArrayList;

public class Solution 
{
    public static int findLargestMinDistance(ArrayList<Integer> boards, int k)
    {
        //    Write your code here.
        long max=-1, sum=0;
        for(int n : boards){
            max=Math.max(max,n);
            sum+=n;
        }
        if(k==1){
            return (int)sum;
        }
        long low=max, high=sum;
        while(low<=high){
            long mid=(low+high)/2;
            int painter = numberOfPainter(boards,mid);
            if(painter<=k){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return (int)low;
    }
    private static int numberOfPainter(ArrayList<Integer> boards, long unit){
        int painter=1;
        int curUnit=0;
        for(int i=0; i<boards.size(); i++){
            int u = boards.get(i);
            if(curUnit+u <= unit){
                curUnit+=u;
            }else{
                painter++;
                curUnit=u;
            }
        }
        return painter;
    }
}
